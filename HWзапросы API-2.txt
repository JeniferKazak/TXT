{
    "age": "34",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "pets": {
            "cat": {
                "age": 3,
                "name": "Sunny"
            },
            "dog": {
                "age": 4,
                "name": "Luky"
            }
        },
        "u_salary_1_5_year": 4000
    },
    "name": "Jenifer",
    "salary": 1000
}
let jsonData = pm.response.json(); - спарсить response
let req = pm.request.url.query.toObject(); - спарситьrequest методом GET


1. Проверить, что name в ответе равно name s request (name забрать из request.)
2. Проверить, что age в ответе равно age s request (age забрать из request.)
3. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

pm.test("Jenifer", function () {
       pm.expect(jsonData.name).to.eql(req.name);                 -1
       pm.expect(jsonData.age).to.eql(req.age);                   -2
       pm.expect(jsonData.salary).to.eql(+req.salary);            -3

});

console.log(jsonData.family) - Вывести в консоль параметр family из response.


4.Проверить, что у параметра dog есть параметры name.
5.Проверить, что у параметра dog есть параметры age.

pm.test("item_1", function () {
       pm.expect(jsonData.family.pets.dog).to.have.property("name");       -4
       pm.expect(jsonData.family.pets.dog).to.have.property("age");        -5     
});

6.Проверить, что параметр name имеет значение Luky.
7.Проверить, что параметр age имеет значение 4.

pm.test("item_2", function () {
       pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");            -6
       pm.expect(jsonData.family.pets.dog.age).to.eql(4);                  -7
        
});